@page "/"
@implements IDisposable
@using System.Web
@using OneOf.Types
@using iFrame.Components
@using OneOf
@inject NavigationManager NavigationManager
@inject PersistentComponentState ApplicationState

@if (!string.IsNullOrWhiteSpace(this.Url))
{
    <Centered>
        <iframe src="@(HttpUtility.UrlDecode(Url))" frameborder="0" style="overflow:hidden;height:100vh;width:100vw;"></iframe>
    </Centered>
}

@code {
    private bool _pageLoaded = false;
    private PersistingComponentStateSubscription _persistingSubscription;
    private OneOf<PrerenderedState, None> _prerenderedState = new None();

    [SupplyParameterFromQuery(Name = "url")]
    public string? Url { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        // remove placeholder UI
        if (!_pageLoaded)
        {
            if ((_prerenderedState.IsT1 && firstRender) || (_prerenderedState.IsT0))
            {
                this.InvokeAsync(() =>
                      {
                          _pageLoaded = true;

                          this.StateHasChanged();
                      });
            }
        }
    }

    protected override void OnInitialized()
    {
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistComponentStateAsync);

        if (!ApplicationState.TryTakeFromJson<PrerenderedState>("fetchdata", out var restored))
        {
            _prerenderedState = new None();
        }
        else
        {
            _prerenderedState = restored!;
        }
    }

    private Task PersistComponentStateAsync()
    {
        ApplicationState.PersistAsJson("fetchdata", new PrerenderedState());

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _persistingSubscription.Dispose();
    }

    private class PrerenderedState;
}